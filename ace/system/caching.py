# vim: ts=4:sw=4:et:cc=120

import hashlib

import ace.analysis


def generate_cache_key(observable: "ace.analysis.Observable", amt: "ace.analysis.AnalysisModuleType") -> str:
    """Returns the key that should be used for caching the result of the
    analysis generated by this analysis module type against this observable."""
    if observable is None:
        return None

    if amt is None:
        return None

    # if the cache_ttl is None then caching is disabled (this is the default behavior)
    if amt.cache_ttl is None:
        return None

    h = hashlib.sha256()
    h.update(observable.type.encode("utf8", errors="ignore"))
    h.update(observable.value.encode("utf8", errors="ignore"))
    if observable.time:
        h.update(str(observable.time.timestamp()).encode("utf8", errors="ignore"))

    h.update(amt.name.encode("utf8", errors="ignore"))
    h.update(amt.version.encode("utf8", errors="ignore"))

    for key in sorted(amt.extended_version.keys()):
        h.update(amt.extended_version[key].encode("utf8", errors="ignore"))

    return h.hexdigest()
