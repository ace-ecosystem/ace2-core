# vim: ts=4:sw=4:et:cc=120
import hashlib

from typing import Union, Optional

from ace.analysis import Observable
from ace.system import ACESystemInterface, get_system
from ace.system.analysis_module import AnalysisModuleType
from ace.system.analysis_request import AnalysisRequest

def generate_cache_key(observable: Observable, amt: AnalysisModuleType) -> str:
    """Returns the key that should be used for caching the result of the
    analysis generated by this analysis module type against this observable."""
    if observable is None:
        return None

    if amt is None:
        return None

    # if the cache_ttl is None then caching is disabled (this is the default behavior)
    if amt.cache_ttl is None:
        return None

    h = hashlib.sha256()
    h.update(observable.type.encode('utf8', errors='ignore'))
    h.update(observable.value.encode('utf8', errors='ignore'))
    if observable.time:
        h.update(str(observable.time.timestamp()).encode('utf8', errors='ignore'))

    h.update(amt.name.encode('utf8', errors='ignore'))
    h.update(amt.version.encode('utf8', errors='ignore'))

    for key in sorted(amt.additional_cache_keys):
        h.update(key.encode('utf8', errors='ignore'))

    return h.hexdigest()

class CachingInterface(ACESystemInterface):
    def get_cached_analysis_result(self, cache_key: str) -> Union[AnalysisRequest, None]:
        raise NotImplementedError()

    def cache_analysis_result(self, cache_key: str, request: AnalysisRequest, expiration: Optional[int]) -> str:
        raise NotImplementedError()

def get_cached_analysis_result(observable: Observable, amt: AnalysisModuleType) -> Union[AnalysisRequest, None]:
    cache_key = generate_cache_key(observable, amt)
    if cache_key is None:
        return None

    return get_system().caching.get_cached_analysis_result(cache_key)

def cache_analysis_result(request: AnalysisRequest) -> Union[str, None]:
    assert isinstance(request, AnalysisRequest)
    assert request.is_observable_analysis_result

    cache_key = generate_cache_key(request.observable, request.type)
    if cache_key is None:
        return None

    return get_system().caching.cache_analysis_result(cache_key, request, request.type.cache_ttl)
