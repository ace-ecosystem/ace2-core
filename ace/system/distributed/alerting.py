# vim: ts=4:sw=4:et:cc=120

from typing import Optional

from ace.data_model import ErrorModel, AlertListModel
from ace.system.distributed import app, TAG_ALERTS
from ace.system.exceptions import ACEError

from fastapi import Response, HTTPException, Query, Path
from fastapi.responses import JSONResponse


@app.put(
    "/ams/{name}",
    name="Register Alert Management System",
    responses={
        200: {"description": "The AMS was **already** registered with the core."},
        201: {"description": "The AMS was successfully registered with the core."},
        400: {"model": ErrorModel},
    },
    tags=[TAG_ALERTS],
    description="""Registers a new alert management system.

Each alert management system has an associated alert queue. A copy of each
alert generated by the core will be placed into each of these queues.

You only need to register an AMS once. Additional attempts to register the same
AMS have no effects.

Once an AMS is registered it can then acquire alerts from the queues.""",
)
async def api_register_alert_system(
    name: str = Path(..., description="The name of the alert management system. The name must be unique.")
):
    try:
        result = await app.state.system.register_alert_system(name)
        if result:
            return Response(status_code=201)
        else:
            return Response(status_code=200)

    except ACEError as e:
        return JSONResponse(status_code=400, content=ErrorModel(code=e.code, details=str(e)).dict())


@app.delete(
    "/ams/{name}",
    name="Unregister Alert Management System",
    responses={
        200: {"description": "The AMS was deleted."},
        400: {"model": ErrorModel},
        404: {"description": "The specified AMS does not exist."},
    },
    tags=[TAG_ALERTS],
    description="""Removes an alert management system from the core. Any outstanding alerts not received by the AMS are lost.
""",
)
async def api_unregister_alert_system(name: str = Path(..., description="The name of the AMS to remove.")):
    try:
        result = await app.state.system.unregister_alert_system(name)
        if result:
            return Response(status_code=200)
        else:
            return Response(status_code=404)

    except ACEError as e:
        return JSONResponse(status_code=400, content=ErrorModel(code=e.code, details=str(e)).dict())


@app.get(
    "/ams/{name}",
    name="Get Alerts",
    responses={
        200: {"model": AlertListModel},
        400: {"model": ErrorModel},
    },
    tags=[TAG_ALERTS],
    description="""Returns the list of uuids for root objects that triggered an alert. An optional timeout parameter specifies how long to wait if the queue is empty. An empty list is returned if the timeout expires.

The list is retrieved from a FIFO queue. Items that are retrieved are removed from the list.

The AMS must separate calls to acquire the details of the root objects.
""",
)
async def api_get_alerts(
    name: str = Path(..., description="The name of the AMS to acquire alerts for."),
    timeout: Optional[int] = Query(
        None, description="Optional timeout (in seconds) of how long to wait if the queue is empty."
    ),
):
    try:
        result = await app.state.system.get_alerts(name, timeout)
        return AlertListModel(root_uuids=result).dict()
    except ACEError as e:
        return JSONResponse(status_code=400, content=ErrorModel(code=e.code, details=str(e)).dict())
